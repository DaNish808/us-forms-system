{"version":3,"sources":["../../../src/js/review/SubmitController.jsx"],"names":["SubmitController","getPreSubmit","required","field","label","error","formConfig","preSubmitInfo","goBack","props","form","pageList","router","eligiblePageList","data","expandedPageList","push","length","path","handleSubmit","pagesByChapter","trackingPrefix","preSubmit","setSubmission","isValid","errors","event","Raven","captureMessage","extra","prefix","submitForm","nextProps","nextStatus","submission","status","previousStatus","newRoute","urlPrefix","showPreSubmitError","renderErrorMessage","setPreSubmit","target","value","React","Component","mapStateToProps","state","ownProps","hasAttemptedSubmit","mapDispatchToProps","propTypes","PropTypes","object","isRequired","array","func","string"],"mappings":"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","file":"SubmitController.js","sourcesContent":["import React from 'react';\nimport Raven from 'raven-js';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport SubmitButtons from './SubmitButtons';\nimport { PreSubmitSection } from '../components/PreSubmitSection';\nimport { isValidForm } from '../validation';\nimport {\n  createPageListByChapter,\n  expandArrayPages,\n  getActivePages,\n  recordEvent\n} from '../helpers';\nimport {\n  setPreSubmit,\n  setSubmission,\n  submitForm\n} from '../actions';\n\nclass SubmitController extends React.Component {\n\n  componentWillReceiveProps(nextProps) {\n    const nextStatus = nextProps.form.submission.status;\n    const previousStatus = this.props.form.submission.status;\n    if (nextStatus !== previousStatus && nextStatus === 'applicationSubmitted') {\n      const newRoute = `${nextProps.formConfig.urlPrefix}confirmation`;\n      this.props.router.push(newRoute);\n    }\n  }\n\n  getPreSubmit = formConfig => {\n    return {\n      required: false,\n      field: 'AGREED',\n      label: 'I agree to the terms and conditions.',\n      error: 'You must accept the agreement before submitting.',\n      ...formConfig.preSubmitInfo\n    };\n  }\n\n  goBack = () => {\n    const {\n      form,\n      pageList,\n      router\n    } = this.props;\n\n    const eligiblePageList = getActivePages(pageList, form.data);\n    const expandedPageList = expandArrayPages(eligiblePageList, this.props.form.data);\n\n    // TODO: Fix this bug that assumes there is a confirmation page.\n    // Actually, it assumes the app also doesn't add routes at the end!\n    // A component at this level should not need to know these things!\n    router.push(expandedPageList[expandedPageList.length - 2].path);\n  }\n\n  handleSubmit = () => {\n    const {\n      form,\n      formConfig,\n      pagesByChapter,\n      trackingPrefix\n    } = this.props;\n\n    // If a pre-submit agreement is required, make sure it was accepted\n    const preSubmit = this.getPreSubmit(formConfig);\n    if (preSubmit.required && !form.data[preSubmit.field]) {\n      this.props.setSubmission('hasAttemptedSubmit', true);\n      // <PreSubmitSection/> is displaying an error for this case\n      return;\n    }\n\n    // Validation errors in this situation are not visible, so we’d\n    // like to know if they’re common\n    const { isValid, errors } = isValidForm(form, pagesByChapter);\n    if (!isValid) {\n      recordEvent({\n        event: `${trackingPrefix}-validation-failed`,\n      });\n      Raven.captureMessage('Validation issue not displayed', {\n        extra: {\n          errors,\n          prefix: trackingPrefix\n        }\n      });\n      this.props.setSubmission('status', 'validationError');\n      this.props.setSubmission('hasAttemptedSubmit', true);\n      return;\n    }\n\n    // User accepted if required, and no errors, so submit\n    this.props.submitForm(formConfig, form);\n  }\n\n  render() {\n    const {\n      form,\n      formConfig,\n      showPreSubmitError,\n      renderErrorMessage\n    } = this.props;\n    const preSubmit = this.getPreSubmit(formConfig);\n\n    return (\n      <div>\n        <PreSubmitSection\n          preSubmitInfo={preSubmit}\n          onChange={(event) => this.props.setPreSubmit(preSubmit.field, event.target.value)}\n          checked={form.data[preSubmit.field]}\n          showError={showPreSubmitError}/>\n        <SubmitButtons\n          onBack={this.goBack}\n          onSubmit={this.handleSubmit}\n          submission={form.submission}\n          renderErrorMessage={renderErrorMessage}/>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const {\n    formConfig,\n    pageList,\n    renderErrorMessage\n  } = ownProps;\n  const router = ownProps.router;\n\n  const form = state.form;\n  const pagesByChapter = createPageListByChapter(formConfig);\n  const trackingPrefix = formConfig.trackingPrefix;\n  const submission = form.submission;\n  const showPreSubmitError = submission.hasAttemptedSubmit;\n\n  return {\n    form,\n    formConfig,\n    pagesByChapter,\n    pageList,\n    renderErrorMessage,\n    router,\n    submission,\n    showPreSubmitError,\n    trackingPrefix\n  };\n}\n\nconst mapDispatchToProps = {\n  setPreSubmit,\n  setSubmission,\n  submitForm\n};\n\nSubmitController.propTypes = {\n  form: PropTypes.object.isRequired,\n  formConfig: PropTypes.object.isRequired,\n  pagesByChapter: PropTypes.object.isRequired,\n  pageList: PropTypes.array.isRequired,\n  renderErrorMessage: PropTypes.func,\n  router: PropTypes.object.isRequired,\n  setPreSubmit: PropTypes.func.isRequired,\n  setSubmission: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  submission: PropTypes.object.isRequired,\n  trackingPrefix: PropTypes.string.isRequired\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SubmitController));\n\n// for tests\nexport { SubmitController };\n"]}