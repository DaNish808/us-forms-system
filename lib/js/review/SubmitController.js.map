{"version":3,"sources":["../../../src/js/review/SubmitController.jsx"],"names":["SubmitController","goBack","props","form","pageList","router","expandedPageList","data","push","length","path","handleSubmit","formConfig","pagesByChapter","trackingPrefix","isValid","errors","preSubmitField","preSubmitInfo","required","field","submitForm","event","Raven","captureMessage","extra","prefix","setSubmission","nextProps","nextStatus","submission","status","previousStatus","newRoute","urlPrefix","showPreSubmitError","renderErrorMessage","setPreSubmit","value","React","Component","mapStateToProps","state","ownProps","hasAttemptedSubmit","mapDispatchToProps","propTypes","PropTypes","object","isRequired","array","func","string"],"mappings":"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","file":"SubmitController.js","sourcesContent":["import React from 'react';\nimport Raven from 'raven-js';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { withRouter } from 'react-router';\n\nimport SubmitButtons from './SubmitButtons';\nimport { PreSubmitSection } from '../components/PreSubmitSection';\nimport { isValidForm } from '../validation';\nimport {\n  createPageListByChapter,\n  getActiveExpandedPages,\n  recordEvent\n} from '../helpers';\nimport {\n  setPreSubmit,\n  setSubmission,\n  submitForm\n} from '../actions';\n\nclass SubmitController extends React.Component {\n\n  componentWillReceiveProps(nextProps) {\n    const nextStatus = nextProps.form.submission.status;\n    const previousStatus = this.props.form.submission.status;\n    if (nextStatus !== previousStatus && nextStatus === 'applicationSubmitted') {\n      const newRoute = `${nextProps.formConfig.urlPrefix}confirmation`;\n      this.props.router.push(newRoute);\n    }\n  }\n\n  goBack = () => {\n    const {\n      form,\n      pageList,\n      router\n    } = this.props;\n\n    const expandedPageList = getActiveExpandedPages(pageList, form.data);\n\n    router.push(expandedPageList[expandedPageList.length - 2].path);\n  }\n\n  handleSubmit = () => {\n    const {\n      form,\n      formConfig,\n      pagesByChapter,\n      trackingPrefix\n    } = this.props;\n\n    let isValid;\n    let errors;\n\n    // If a pre-submit agreement was specified, it has to be accepted first\n    const preSubmitField = formConfig.preSubmitInfo &&\n        formConfig.preSubmitInfo.required && (formConfig.preSubmitInfo.field || 'AGREED');\n    if (preSubmitField && !form.data[preSubmitField]) {\n      isValid = false;\n    } else {\n      ({ isValid, errors } = isValidForm(form, pagesByChapter));\n    }\n\n    if (isValid) {\n      this.props.submitForm(formConfig, form);\n    } else {\n      // validation errors in this situation are not visible, so we’d\n      // like to know if they’re common\n      if (preSubmitField && form.data[preSubmitField]) {\n        recordEvent({\n          event: `${trackingPrefix}-validation-failed`,\n        });\n        Raven.captureMessage('Validation issue not displayed', {\n          extra: {\n            errors,\n            prefix: trackingPrefix\n          }\n        });\n        this.props.setSubmission('status', 'validationError');\n      }\n      this.props.setSubmission('hasAttemptedSubmit', true);\n    }\n  }\n\n  render() {\n    const {\n      form,\n      formConfig,\n      showPreSubmitError,\n      renderErrorMessage,\n      submission\n    } = this.props;\n    return (\n      <div>\n        { this.preSubmitInfo && <PreSubmitSection\n          required\n          preSubmitInfo={formConfig.preSubmitInfo}\n          onChange={() => this.props.setPreSubmit(formConfig.preSubmitInfo.field, this.value)}\n          form={form}\n          showError={showPreSubmitError}/> }\n        <SubmitButtons\n          onBack={this.goBack}\n          onSubmit={this.handleSubmit}\n          submission={submission}\n          renderErrorMessage={renderErrorMessage}/>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps(state, ownProps) {\n  const {\n    formConfig,\n    pageList,\n    renderErrorMessage\n  } = ownProps;\n  const router = ownProps.router;\n\n  const form = state.form;\n  const pagesByChapter = createPageListByChapter(formConfig);\n  const trackingPrefix = formConfig.trackingPrefix;\n  const submission = form.submission;\n  const showPreSubmitError = submission.hasAttemptedSubmit;\n\n  return {\n    form,\n    formConfig,\n    pagesByChapter,\n    pageList,\n    renderErrorMessage,\n    router,\n    submission,\n    showPreSubmitError,\n    trackingPrefix\n  };\n}\n\nconst mapDispatchToProps = {\n  setPreSubmit,\n  setSubmission,\n  submitForm\n};\n\nSubmitController.propTypes = {\n  form: PropTypes.object.isRequired,\n  formConfig: PropTypes.object.isRequired,\n  pagesByChapter: PropTypes.object.isRequired,\n  pageList: PropTypes.array.isRequired,\n  renderErrorMessage: PropTypes.func,\n  router: PropTypes.object.isRequired,\n  setPreSubmit: PropTypes.func.isRequired,\n  setSubmission: PropTypes.func.isRequired,\n  submitForm: PropTypes.func.isRequired,\n  submission: PropTypes.object.isRequired,\n  trackingPrefix: PropTypes.string.isRequired\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SubmitController));\n\n// for tests\nexport { SubmitController };\n"]}